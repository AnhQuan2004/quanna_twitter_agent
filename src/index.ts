import axios from "axios";
import { Scraper, SearchMode } from "agent-twitter-client";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { askGemini } from "./ask";
import dotenv from "dotenv";
import fs from "fs";

dotenv.config();

const number = Number(process.env.REPLY_LATEST_TWEET) || 5;
const rapidApiHost = process.env.RAPIDAPI_HOST || "";
const rapidApiKey = process.env.RAPIDAPI_KEY || "";

// H√†m x√≥a t·ª´ ƒë·∫ßu ti√™n c·ªßa chu·ªói
function removeFirstWord(str: string): string {
  const words = str.split(" ");
  return words.slice(1).join(" ");
}

// Helper function t·∫°o th·ªùi gian ch·ªù ng·∫´u nhi√™n
function randomSleep(min: number, max: number): Promise<void> {
  const ms = Math.floor(Math.random() * (max - min + 1)) + min;
  console.log(`ƒêang ch·ªù ${ms}ms...`);
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Helper function t·∫°o c√°c bi·∫øn th·ªÉ cho tin nh·∫Øn
function variateMessage(message: string): string {
  // T·∫°o danh s√°ch c√°c bi·∫øn th·ªÉ c√≥ th·ªÉ
  const variations = [
    message,
    message + " üëç",
    message + " üéâ",
    "Hey, " + message,
    "Check this out: " + message,
    message + " #NFT",
    message + " #Airdrop",
    "Here you go: " + message,
  ];

  // Ch·ªçn ng·∫´u nhi√™n m·ªôt bi·∫øn th·ªÉ
  return variations[Math.floor(Math.random() * variations.length)];
}

// H√†m reply tweet: t√¨m tweet m·ªõi, tr·∫£ l·ªùi v√† l∆∞u l·∫°i v√†o file replied.json
export const replyTweet = async function (
  genAI: GoogleGenerativeAI,
  scraper: Scraper,
  username: string
) {
  // L·∫•y danh s√°ch tweet
  const replyTweetsResponse = await scraper.fetchSearchTweets(
    `@${username}`,
    number,
    SearchMode.Latest
  );
  const replyTweets = replyTweetsResponse.tweets;
  console.log("S·ªë tweet fetch ƒë∆∞·ª£c:", replyTweets.length);

  // L·ªçc tweet ch∆∞a ƒë∆∞·ª£c reply
  let toReply = replyTweets;
  if (fs.existsSync("replied.json")) {
    const data = fs.readFileSync("replied.json", "utf-8");
    const replied = JSON.parse(data);
    toReply = replyTweets.filter(
      (tweet: any) => !replied.some((item: any) => item.id === tweet.id)
    );
    console.log(
      "ƒê√£ t√¨m file replied.json, s·ªë tweet ch∆∞a reply:",
      toReply.length
    );
  } else {
    console.log(
      "Kh√¥ng t√¨m th·∫•y file replied.json, d√πng t·∫•t c·∫£ tweet fetch ƒë∆∞·ª£c"
    );
    toReply = replyTweets;
  }

  // Ch·ªâ x·ª≠ l√Ω tweet m·ªõi nh·∫•t (ƒë·∫ßu ti√™n trong danh s√°ch)
  if (toReply.length > 0) {
    const tweet = toReply[0]; // Ch·ªâ l·∫•y tweet ƒë·∫ßu ti√™n
    console.log("Ch·ªâ x·ª≠ l√Ω tweet m·ªõi nh·∫•t:", tweet.id);

    const replyID = tweet.id;
    const tweetText = tweet.text || "";
    const replyContent = removeFirstWord(tweetText);

    // Ki·ªÉm tra conversationId c√≥ t·ªìn t·∫°i hay kh√¥ng
    const targetId = tweet.conversationId;
    if (!targetId) {
      console.log(`Tweet ${replyID} kh√¥ng c√≥ conversationId, b·ªè qua.`);
    } else {
      console.log(`ƒêang x·ª≠ l√Ω tweet ${replyID} v·ªõi conversationId ${targetId}`);

      // L·∫•y tweet g·ªëc theo conversationId
      const target = await scraper.getTweet(targetId);
      const targetText = target?.text || "";

      // Th·ªùi gian ch·ªù ng·∫´u nhi√™n tr∆∞·ªõc khi l·∫•y n·ªôi dung reply t·ª´ Gemini
      await randomSleep(2000, 5000);

      const contentToReply = await askGemini(
        genAI,
        "reply",
        targetText,
        replyContent
      );

      try {
        // Th·ªùi gian ch·ªù ng·∫´u nhi√™n tr∆∞·ªõc khi g·ª≠i reply
        await randomSleep(3000, 8000);

        const response = await scraper.sendTweet(contentToReply, replyID);
        console.log("ƒê√£ reply tweet id:", replyID);
      } catch (error) {
        console.error("L·ªói khi reply tweet:", error);
      }
    }
  } else {
    console.log("Kh√¥ng c√≥ tweet n√†o ƒë·ªÉ reply.");
  }

  // L∆∞u to√†n b·ªô tweet ƒë√£ fetch v√†o file replied.json
  fs.writeFileSync("replied.json", JSON.stringify(replyTweets, null, 2));
  return replyTweets;
};

// H√†m ki·ªÉm tra retweet
async function checkRetweet(screenname: string, tweetId: string) {
  const options = {
    method: "GET",
    url: "https://twitter-api45.p.rapidapi.com/checkretweet.php",
    params: {
      screenname: screenname,
      tweet_id: tweetId,
    },
    headers: {
      "x-rapidapi-host": rapidApiHost,
      "x-rapidapi-key": rapidApiKey,
    },
  };

  try {
    console.log(
      `\nKi·ªÉm tra retweet c·ªßa @${screenname} cho tweet ID ${tweetId}...`
    );
    const response = await axios.request(options);
    console.log("K·∫øt qu·∫£ ki·ªÉm tra retweet:", response.data);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i retweet:", error);
    return null;
  }
}

// H√†m get tweet detail s·ª≠ d·ª•ng API t·ª´ RapidAPI
async function getTweetDetail(conversationId: string) {
  const options = {
    method: "GET",
    url: "https://twitter-api45.p.rapidapi.com/tweet_thread.php",
    params: { id: conversationId },
    headers: {
      "x-rapidapi-host": rapidApiHost,
      "x-rapidapi-key": rapidApiKey,
    },
  };

  try {
    const response = await axios.request(options);
    const data = response.data as any; // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu l√† any ƒë·ªÉ tr√°nh l·ªói
    console.log("Chi ti·∫øt tweet thread ƒë·∫ßy ƒë·ªß:", data);

    // X·ª≠ l√Ω v√† l·∫•y th√¥ng tin c·∫ßn thi·∫øt t·ª´ thread
    if (
      data &&
      data.thread &&
      Array.isArray(data.thread) &&
      data.thread.length > 0
    ) {
      console.log("\nDanh s√°ch replies trong thread:");

      // Danh s√°ch tweets trong thread ƒë·ªÉ ki·ªÉm tra retweet
      const tweetUsers: Array<{ username: string; tweetId: string }> = [];

      // Hi·ªÉn th·ªã th√¥ng tin replies
      data.thread.forEach((reply: any, index: number) => {
        const displayText = reply.display_text || reply.text || "No text";
        const authorName = reply.author?.screen_name || "Unknown user";
        const tweetId = reply.id_str || reply.id || "";

        console.log(`[${index + 1}] @${authorName}: ${displayText}`);

        // Th√™m username v√† tweet ID v√†o danh s√°ch (n·∫øu c√≥)
        if (authorName && authorName !== "Unknown user" && tweetId) {
          tweetUsers.push({ username: authorName, tweetId: tweetId });
        }
      });

      // Ki·ªÉm tra retweet cho t·∫•t c·∫£ usernames
      console.log("\nKi·ªÉm tra retweet c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng trong thread...");

      // G·ªçi h√†m reply cho nh·ªØng ng∆∞·ªùi ƒë√£ retweet
      await replyToRetweeters(global.scraper, conversationId, tweetUsers);
    } else {
      console.log("Kh√¥ng c√≥ replies trong thread.");
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y tweet thread:", error);
  }
}

// H√†m reply ng∆∞·ªùi d√πng ƒë√£ retweet - s·ª≠a l·∫°i ƒë·ªÉ reply tr·ª±c ti·∫øp v√†o tweet id
async function replyToRetweeters(
  scraper: Scraper,
  tweetId: string,
  tweetUsers: Array<{ username: string; tweetId: string }>
) {
  console.log("\nB·∫Øt ƒë·∫ßu reply cho nh·ªØng ng∆∞·ªùi ƒë√£ retweet...");

  // T·∫°o danh s√°ch base URL cho link airdrop
  const baseUrls = [
    "https://anhquan.com",
    "https://anhquan.com/airdrop",
    "https://anhquan.io",
  ];

  for (const tweetUser of tweetUsers) {
    try {
      const { username, tweetId: userTweetId } = tweetUser;

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ retweet ch∆∞a
      const retweetCheck = await checkRetweet(username, tweetId);

      // X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ c√≥ th·ªÉ l√† b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu n√†o
      const isRetweeted =
        retweetCheck && (retweetCheck as any).is_retweeted === true;

      if (isRetweeted) {
        console.log(
          `@${username} ƒë√£ retweet! ƒêang reply tr·ª±c ti·∫øp v√†o tweet c·ªßa h·ªç...`
        );

        // Ch·ªçn ng·∫´u nhi√™n URL c∆° s·ªü v√† th√™m tham s·ªë ng·∫´u nhi√™n ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        const randomUrl = baseUrls[Math.floor(Math.random() * baseUrls.length)];
        const uniqueUrl = `${randomUrl}?ref=${Math.floor(
          Math.random() * 10000
        )}`;

        // T·∫°o bi·∫øn th·ªÉ message
        const message = variateMessage(`airdrop link: ${uniqueUrl}`);

        // Th·ªùi gian ch·ªù ng·∫´u nhi√™n tr∆∞·ªõc khi g·ª≠i reply
        await randomSleep(3000, 10000);

        // Reply v·ªõi message ƒë√£ bi·∫øn th·ªÉ
        await scraper.sendTweet(message, userTweetId);

        console.log(
          `ƒê√£ reply "${message}" ƒë·∫øn @${username} (tweet ID: ${userTweetId})`
        );
      } else {
        console.log(`@${username} ch∆∞a retweet, b·ªè qua.`);
      }

      // Th·ªùi gian ch·ªù ng·∫´u nhi√™n d√†i h∆°n gi·ªØa c√°c l·∫ßn x·ª≠ l√Ω ng∆∞·ªùi d√πng
      await randomSleep(8000, 20000);
    } catch (error) {
      console.error(`L·ªói khi x·ª≠ l√Ω ng∆∞·ªùi d√πng:`, error);
      // Ch·ªù th√™m th·ªùi gian n·∫øu g·∫∑p l·ªói
      await randomSleep(15000, 30000);
    }
  }
}

// Khai b√°o bi·∫øn global ƒë·ªÉ l∆∞u scraper instance
declare global {
  var scraper: Scraper;
}

// H√†m l∆∞u cookie v√†o file
async function cacheCookies(cookies: any) {
  try {
    fs.writeFileSync("cookies.json", JSON.stringify(cookies, null, 2));
    console.log("ƒê√£ l∆∞u cookie v√†o file cookies.json");
  } catch (error) {
    console.error("L·ªói khi l∆∞u cookie:", error);
  }
}

// H√†m l·∫•y cookie t·ª´ file
async function getCachedCookies() {
  try {
    if (fs.existsSync("cookies.json")) {
      const cookiesData = fs.readFileSync("cookies.json", "utf-8");
      if (cookiesData && cookiesData.trim() !== "") {
        console.log("ƒê√£ t√¨m th·∫•y file cookies.json");
        return JSON.parse(cookiesData);
      }
    }
    console.log("Kh√¥ng t√¨m th·∫•y file cookies.json ho·∫∑c file r·ªóng");
    return null;
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc cookie:", error);
    return null;
  }
}

// H√†m login Twitter
async function login(
  scraper: Scraper,
  username: string,
  password: string,
  email: string,
  fa: string
) {
  try {
    // Th·ª≠ s·ª≠ d·ª•ng cookie ƒë√£ cache
    const cachedCookies = await getCachedCookies();
    if (cachedCookies) {
      console.log("ƒêang th·ª≠ ƒëƒÉng nh·∫≠p b·∫±ng cookie ƒë√£ l∆∞u...");

      // Chuy·ªÉn ƒë·ªïi cookie t·ª´ object sang string format
      const cookieStrings = cachedCookies.map(
        (cookie: any) =>
          `${cookie.name || cookie.key}=${cookie.value}; Domain=${
            cookie.domain
          }; Path=${cookie.path}; ${cookie.secure ? "Secure" : ""}; ${
            cookie.httpOnly ? "HttpOnly" : ""
          }; SameSite=${cookie.sameSite || "Lax"}`
      );

      if (cookieStrings.length > 0) {
        // Set cookie v√†o scraper
        await scraper.setCookies(cookieStrings);

        // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng ch∆∞a
        const isLoggedIn = await scraper.isLoggedIn();
        if (isLoggedIn) {
          console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng cookie ƒë√£ l∆∞u");
          return true;
        } else {
          console.log("Cookie ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i");
          // Kh√¥ng x√≥a cookie, ch·ªâ ƒëƒÉng nh·∫≠p l·∫°i v√† c·∫≠p nh·∫≠t
        }
      }
    }

    // N·∫øu kh√¥ng c√≥ cookie ho·∫∑c cookie kh√¥ng h·ª£p l·ªá, ƒëƒÉng nh·∫≠p b√¨nh th∆∞·ªùng
    console.log("ƒêƒÉng nh·∫≠p b·∫±ng th√¥ng tin t√†i kho·∫£n...");
    await scraper.login(username, password, email, fa);
    console.log("ƒêƒÉng nh·∫≠p Twitter th√†nh c√¥ng");

    // L∆∞u cookie m·ªõi
    const cookies = await scraper.getCookies();
    await cacheCookies(cookies);

    return true;
  } catch (error) {
    console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
    return false;
  }
}

// H√†m main ch·∫°y c·∫£ 2 ch·ª©c nƒÉng: reply tweet v√† l·∫•y tweet detail
async function main() {
  // Kh·ªüi t·∫°o instance cho genAI v√† scraper
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
  const scraper = new Scraper();

  // L∆∞u scraper v√†o bi·∫øn global ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c h√†m kh√°c
  global.scraper = scraper;

  // Th√¥ng tin ƒëƒÉng nh·∫≠p Twitter t·ª´ .env
  const username = process.env.TWITTER_USERNAME || "";
  const password = process.env.TWITTER_PASSWORD || "";
  const email = process.env.TWITTER_EMAIL || "";
  const fa = process.env.TWITTER_2FA_SECRET || "";

  console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω...");

  // ƒêƒÉng nh·∫≠p Twitter
  const loggedIn = await login(scraper, username, password, email, fa);
  if (!loggedIn) {
    console.error("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v√†o Twitter. ƒêang d·ª´ng ch∆∞∆°ng tr√¨nh...");
    return;
  }

  // Reply tweet v√† l·∫•y k·∫øt qu·∫£ tr·∫£ v·ªÅ
  console.log("ƒêang ch·∫°y replyTweet...");
  const replyTweets = await replyTweet(genAI, scraper, username);

  // L·∫•y tweet_id v√† g·ªçi API get tweet detail
  if (replyTweets.length > 0) {
    // L·∫•y ID c·ªßa tweet ƒë·∫ßu ti√™n v√† conversation ID
    const firstTweetId = replyTweets[0].id;
    const conversationId = replyTweets[0].conversationId;

    console.log("ID c·ªßa tweet ƒë·∫ßu ti√™n:", firstTweetId);
    console.log("ConversationId c·ªßa tweet ƒë·∫ßu ti√™n:", conversationId);

    if (conversationId) {
      // L·∫•y tweet g·ªëc t·ª´ conversationId
      const originalTweet = await scraper.getTweet(conversationId);

      if (originalTweet && originalTweet.id) {
        console.log("ID c·ªßa tweet g·ªëc:", originalTweet.id);
        // S·ª≠ d·ª•ng ID c·ªßa tweet g·ªëc ƒë·ªÉ l·∫•y thread
        await getTweetDetail(originalTweet.id);
      } else {
        console.log(
          "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin tweet g·ªëc. S·ª≠ d·ª•ng conversation ID..."
        );
        await getTweetDetail(conversationId);
      }
    } else if (firstTweetId) {
      console.log(
        "Tweet ƒë·∫ßu ti√™n kh√¥ng c√≥ conversationId. S·ª≠ d·ª•ng tweet ID..."
      );
      await getTweetDetail(firstTweetId);
    } else {
      console.log("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID ƒë·ªÉ l·∫•y chi ti·∫øt tweet.");
    }
  } else {
    console.log("Kh√¥ng c√≥ tweet n√†o ƒë·ªÉ reply.");
  }
}

main().catch((error) => {
  console.error("L·ªói trong qu√° tr√¨nh th·ª±c thi:", error);
});
